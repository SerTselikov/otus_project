#Область ПрограммныйИнтерфейс

Функция ПолучитьКомпоненту() Экспорт
	
	КлиентКомпоненты = Неопределено;
	Если Не трекер_RabbitMQКлиентСервер.ИнициализироватьКомпоненту(КлиентКомпоненты) Тогда
		
		ПодключитьКомпоненту();
		трекер_RabbitMQКлиентСервер.ИнициализироватьКомпоненту(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции

Процедура ОтправитьСообщение(ТекстСообщения, КлючАналитики) Экспорт
	ПараметрыСообщения = трекер_RabbitMQКлиентСервер.НовыеПараметрыИсходящегоСообщения();
	ПараметрыПодключения = РегистрыСведений.трекер_ПараметрыRabbitMQ.ЗначенияПараметров();
	ЗаполнитьЗначенияСвойств(ПараметрыСообщения, ПараметрыПодключения);
	ПараметрыСообщения.КлючМаршрутизации = ПараметрыПодключения.КлючМаршрутизации[КлючАналитики];
	
	ПараметрыСообщения.ТекстСообщения = ТекстСообщения;
	
	КлиентКомпоненты = ПолучитьКомпоненту();
	трекер_RabbitMQКлиентСервер.ОтправитьСообщение(КлиентКомпоненты, ПараметрыСообщения);
КонецПроцедуры

Функция ПолучитьСообщение(ИмяОчереди, КэшируемыеЗначения = Неопределено) Экспорт
	Если КэшируемыеЗначения = Неопределено Тогда
		КэшируемыеЗначения = Новый Структура;
	КонецЕсли;
	
	ПараметрыСообщения = трекер_ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КэшируемыеЗначения, "ПараметрыСообщения");
	Если ПараметрыСообщения = Неопределено Тогда
		ПараметрыСообщения = трекер_RabbitMQКлиентСервер.НовыеПараметрыВходящегоСообщения();
		ПараметрыПодключения = РегистрыСведений.трекер_ПараметрыRabbitMQ.ЗначенияПараметров();
		ЗаполнитьЗначенияСвойств(ПараметрыСообщения, ПараметрыПодключения);
		КэшируемыеЗначения.Вставить("ПараметрыСообщения", ПараметрыСообщения);
	КонецЕсли;
	ПараметрыСообщения.ИмяОчереди = ИмяОчереди;
	КлиентКомпоненты = трекер_ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КэшируемыеЗначения, "КлиентКомпоненты");
	Если КлиентКомпоненты = Неопределено Тогда
		КлиентКомпоненты = ПолучитьКомпоненту();
		КэшируемыеЗначения.Вставить("КлиентКомпоненты", КлиентКомпоненты);
	КонецЕсли;
	
	Сообщение = трекер_RabbitMQКлиентСервер.ПрочитатьСообщение(КлиентКомпоненты, ПараметрыСообщения);
	Возврат Сообщение;
КонецФункции

Функция ОчередиДляПолученияСообщений() Экспорт
	ЗначенияПараметров = РегистрыСведений.трекер_ПараметрыRabbitMQ.ЗначенияПараметров();
	Если ТипЗнч(ЗначенияПараметров.ИмяОчереди) = Тип("Массив") Тогда
		Очереди = ЗначенияПараметров.ИмяОчереди; 
	Иначе
		Очереди = трекер_ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗначенияПараметров.ИмяОчереди); 
	КонецЕсли;
	Возврат Очереди;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодключитьКомпоненту(КомпонентаПодключена = Неопределено, ВыводитьСообщения = Ложь)
	
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановки(Новый УникальныйИдентификатор);
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Если ВыводитьСообщения Тогда
		Сообщить(НСтр("ru = 'Компонента подключена!'"));
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьАдресМакетаКомпановки(УникальныйИдентификатор) Экспорт
	
	МакетВнешнейКомпоненты    = Обработки.трекер_ПримерРаботыСКомпонентойPinkRabbitMQ.ПолучитьМакет("ВнешняяКомпонента");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

#КонецОбласти