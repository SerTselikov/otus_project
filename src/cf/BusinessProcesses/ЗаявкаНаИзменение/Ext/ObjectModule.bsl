
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		Если ДанныеЗаполнения.Свойство("ПрограммныйПродукт") И ТипЗнч(ДанныеЗаполнения.ПрограммныйПродукт) = Тип("Строка") Тогда
			ПрограммныйПродукт = Справочники.ПрограммныеПродукты.ЭлементПоИмени(ДанныеЗаполнения.ПрограммныйПродукт);
	    КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	Если ЭтоНовый() Тогда
		Дата = ТекущаяДатаСеанса();
		Если НЕ ЗначениеЗаполнено(Статус) Тогда
			Статус = БизнесПроцессы.ЗаявкаНаИзменение.ДоступныеСтатусы(Статус)[0];
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если Завершен Тогда
		ВремяНачала = ?(ЗначениеЗаполнено(ДатаНачалаРаботы), ДатаНачалаРаботы, Дата);
		ВремяНачалаВМиллисекундах = (ВремяНачала - Дата(1,1,1))*1000;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(
			"ЗаявкаНаИзменениеОбщееВремяРаботы",
			ВремяНачалаВМиллисекундах,, 
			СтрШаблон("%1,%2", Номер, Статус));
	КонецЕсли;
КонецПроцедуры

Процедура ДоработкаТребуетсяПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = Статус <> Перечисления.СтатусыЗаявкиНаИзменение.ДоработкаНеТребуется;
КонецПроцедуры

Процедура ДоработкаСогласованаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = Статус <> Перечисления.СтатусыЗаявкиНаИзменение.ДоработкаНеСогласована;
КонецПроцедуры

Процедура ЗамечанияОтАналитикаЕстьПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = Статус = Перечисления.СтатусыЗаявкиНаИзменение.ВРазработке;
КонецПроцедуры

Процедура ЗамечанияОтТехлидаЕстьПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = Статус = Перечисления.СтатусыЗаявкиНаИзменение.ВРазработке;
КонецПроцедуры

Процедура ВзятьВПроработкуПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	Аналитик = Пользователи.ТекущийПользователь();
	ДатаНачалаРаботы = ТекущаяДатаСеанса();
	Записать();
КонецПроцедуры

Процедура УточнитьПостановкуЗадачиПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	Для Каждого ЗадачаОбъект Из ФормируемыеЗадачи Цикл
		ЗадачаОбъект.Исполнитель = Аналитик;
	КонецЦикла;
КонецПроцедуры

Процедура УточнитьПостановкуЗадачиПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	Если Статус = Перечисления.СтатусыЗаявкиНаИзменение.ОценкаТрудозатрат 
		И НЕ ЗначениеЗаполнено(Описание) Тогда
		ВызватьИсключение "Не заполнено описание";
	КонецЕсли;
	ТекПользователь = Пользователи.ТекущийПользователь();
	Если Аналитик <> ТекПользователь Тогда
		Аналитик = ТекПользователь;
		Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ОценитьТрудозатратыПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	Если НЕ ЗначениеЗаполнено(ПлановыеТрудозатраты) Тогда
		ВызватьИсключение "Не заполнены плановые трудозатраты";
	КонецЕсли;
	ТекПользователь = Пользователи.ТекущийПользователь();
	Если Техлид <> ТекПользователь Тогда
		Техлид = ТекПользователь;
		Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьДоработкуПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	ТекПользователь = Пользователи.ТекущийПользователь();
	Если Программист <> ТекПользователь Тогда
		Программист = ТекПользователь;
		Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьКодПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	Если ЗначениеЗаполнено(Техлид) Тогда
		Для Каждого ЗадачаОбъект Из ФормируемыеЗадачи Цикл
			ЗадачаОбъект.Исполнитель = Техлид;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОценитьТрудозатратыПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	Если ЗначениеЗаполнено(Техлид) Тогда
		Для Каждого ЗадачаОбъект Из ФормируемыеЗадачи Цикл
			ЗадачаОбъект.Исполнитель = Техлид;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СогласоватьДоработкуПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	Если ЗначениеЗаполнено(Акцептант) Тогда
		Для Каждого ЗадачаОбъект Из ФормируемыеЗадачи Цикл
			ЗадачаОбъект.Исполнитель = Акцептант;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьДоработкуПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	Если ЗначениеЗаполнено(Программист) Тогда
		Для Каждого ЗадачаОбъект Из ФормируемыеЗадачи Цикл
			ЗадачаОбъект.Исполнитель = Программист;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПротестироватьДоработкуПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	Для Каждого ЗадачаОбъект Из ФормируемыеЗадачи Цикл
		ЗадачаОбъект.Исполнитель = Аналитик;
	КонецЦикла;
КонецПроцедуры

Процедура СозданиеЗапросаНаСлияниеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	Для Каждого ЗадачаОбъект Из ФормируемыеЗадачи Цикл
		ЗадачаОбъект.Исполнитель = Программист;
	КонецЦикла;
КонецПроцедуры

Процедура СдатьРаботуЗаказчикуПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	Для Каждого ЗадачаОбъект Из ФормируемыеЗадачи Цикл
		ЗадачаОбъект.Исполнитель = Аналитик;
	КонецЦикла;
КонецПроцедуры

Процедура СогласоватьДоработкуПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	ТекПользователь = Пользователи.ТекущийПользователь();
	Если Акцептант <> ТекПользователь Тогда
		Акцептант = ТекПользователь;
		Записать();
	КонецЕсли;
КонецПроцедуры
